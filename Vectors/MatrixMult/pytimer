#!/usr/bin/python
import sys, time, os, subprocess

matrixSize = sys.argv[1] # pass in an integer

silent = " 2>&1 > /dev/null" # redirect standard output to trash
jtest  = "./exe/jnothing.ijs"
jreal  = "./exe/jexe.ijs"
ctest  = "./exe/cnothing.out"
creal  = "./exe/cexe.out"

def timer(filename):
    """ Measure the time it takes to invoke the given command
    using a shell subprocess. """
    strCmd = filename + silent
    start = end = 0
    start = time.time()
    myProcess = subprocess.Popen(strCmd, shell=True)
    end = time.time()
    myProcess.wait()
    return end - start

def av(filename, test, iters = 10):
    avg = 0
    for i in range(iters):
        if (test):
            avg += timer(filename)
        else:
            avg += timer(filename + " " + matrixSize)
    return avg / iters

def winner(a1, n1, a2, n2):
    output = "Results:\n"
    output += n1 + ": " + str(a1) + "\n"
    output += n2 + ": " + str(a2) + "\n"
    if (a1 == a2):
        output += "tie"
    if (a1 < a2):
        output += n1 + " was " + str(a2 / a1) + " times faster."
    if (a1 > a2):
        output += n2 + " was " + str(a1 / a2) + " times faster."
    return output

# use these two to subtract the estimated time required just run the executable or script
#see = av(creal, False) - av(ctest, True)
#jay = av(jreal, False) - av(jtest, True)

# use these instead to get the actual time only
see = av(creal, False, 1)
jay = av(jreal, False, 1)

print winner(see, "C++", jay, "J")

